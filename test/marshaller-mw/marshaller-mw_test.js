// Generated by LiveScript 1.2.0
(function(){
  var requires, assert, expect, _, Person, PersonMarshaller, DecoratorMw, MarshalMw, CtxDecorations, middleware, Middleware, app;
  requires = require('../../requires');
  requires.test('test_setup');
  assert = require('chai').assert;
  expect = require('chai').expect;
  _ = require('prelude-ls');
  Person = requires.clazz('person');
  PersonMarshaller = requires.marshaller('person_marshaller');
  DecoratorMw = require('decorator-mw');
  MarshalMw = requires.lib('marshaller-mw');
  CtxDecorations = require('decorator-mw').CtxDecorations;
  middleware = require('middleware');
  Middleware = middleware.Middleware;
  app = {
    decorators: new CtxDecorations
  };
  describe('MarshalMw', function(){
    var someHash, marshallers, mshal;
    mshal = {};
    describe('create instance', function(){
      context('no args', function(){
        before(function(){
          return mshal.empty = new MarshalMw;
        });
        specify('is created', function(){
          return expect(mshal.empty).to.not.equal(null);
        });
        return specify('has marshallers', function(){
          return expect(mshal.empty.marshallers).to.not.equal(null);
        });
      });
      context('with invalid marshallers hash', function(){
        before(function(){
          var someHash;
          return someHash = {
            x: 1
          };
        });
        return specify('is created', function(){
          return expect(function(){
            return new MarshalMw(someHash);
          }).to['throw'];
        });
      });
      return context('with marshallers hash', function(){
        before(function(){
          var marshallers;
          return marshallers = {
            person: PersonMarshaller
          };
        });
        return specify('is created', function(){
          return expect(function(){
            return new MarshalMw(marshallers);
          }).to.not['throw'];
        });
      });
    });
    return describe('run', function(){
      before(function(){
        var marshallers;
        marshallers = {
          person: PersonMarshaller
        };
        return mshal.valid = new MarshalMw(marshallers, {
          mode: 'alone'
        });
      });
      context('no args', function(){
        return specify('is run ok', function(){
          return expect(function(){
            return mshal.valid.run();
          }).to.not['throw'];
        });
      });
      return context('with valid context', function(){
        before(function(){
          var someHash;
          return someHash = {
            x: 1
          };
        });
        return specify('is run ok?', function(){
          return expect(function(){
            return mshal.valid.run('hello', {
              mode: 'alone'
            });
          }).to.not['throw'];
        });
      });
    });
  });
}).call(this);
