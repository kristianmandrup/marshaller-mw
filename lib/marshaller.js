// Generated by LiveScript 1.2.0
(function(){
  var Class, requires, lo, Encrypter, Marshaller, slice$ = [].slice;
  Class = require('jsclass/src/core').Class;
  requires = require('../requires');
  lo = require('lodash');
  Encrypter = requires.util('encrypter');
  Marshaller = new Class({
    initialize: function(data){
      this.setData(data);
      return this;
    },
    setData: function(data){
      return this.data = lo.extend({}, data);
    },
    marshal: function(data){
      if (data) {
        this.setData(data);
      }
      if (this.data === void 8) {
        throw Error("No data to marshal, please pass data-object to marshal either in the Marshaller constructor or directly when calling marshal");
      }
      if (typeof this.data !== 'object') {
        throw Error("Invalid data to marshal, must be an Object, was: " + this.data);
      }
    },
    deleteProperties: function(){
      var names, self;
      names = slice$.call(arguments);
      if (lo.isEmpty(names)) {
        return;
      }
      self = this;
      return names.flatten().each(function(name){
        var ref$, ref1$;
        return ref1$ = (ref$ = self.data)[name], delete ref$[name], ref1$;
      });
    },
    encrypt: function(value){
      return this.encrypter.encrypt(value);
    },
    encrypter: function(){
      return new Encrypter;
    }
  });
  module.exports = Marshaller;
}).call(this);
